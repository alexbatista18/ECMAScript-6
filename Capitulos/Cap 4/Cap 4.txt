##Anotações Capítulo 4

#Iteradores
O iterador saber como acessar um a um o iteravel, além disso ele possui um método "next" que retorna
o próximo item da estrutura iterável definido por 2 propriedades: done e value . O done é um valor 
booleano que indica	se toda a estrutura foi acessada, enquanto o value contém o valor extraído.
Exemplo:
Se temos uma estrutura com apenas um valor:
iteravel.next();	//	{value:	1,	done:	false}
Se chamarmos novamente obtemos true pois não existem mais valores para iterar, indicando que toda a 
estrutura já foi percorrida.

#iteraveis
Em JavaScript alguns tipos já são iteraveis por padrão, como Arrays, Strings, Maps e Sets, porém um
objeto é definido interavel se ele define  explicitamente o seu comportamento de iteração. Para isso,
é necessário que ele implemente o seu iterador na propriedade de chave Symbol.iterator.
Exemplo:
var	bruxos	=	['Harry	Potter',	'Hermione	Granger',	'Rony	Weasley']
//	obtém	o	iterador
var	iteradorBruxos	=	bruxos[Symbol.iterator]();
iteradorBruxos.next();	//	{value:	Harry	Potter,	done:	false}
iteradorBruxos.next();	//	{value:	Hermione	Granger,	done:	false}
iteradorBruxos.next();	//	{value:	Rony	Weasley,	done:	false}
iteradorBruxos.next();	//	{value:	undefined,	done:	true}
Recuperamos o iterador da propriedade Symbol.iterator e usamos o seu método next para passar por toda
a lista.
