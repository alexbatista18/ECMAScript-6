Anotações Capítulo 11 (Obs: sem exemplo em js pois já vinhamos usando.)
JavaScript é uma linguagem orientada a objetos, e para definirmos um objeto, podemos utilizar a seguinte 
estrutura:
Podemos criar um objeto com uma função construtora:
function Livro(titulo) {
this.titulo = titulo;
}
var livro = new Livro('Entendendo ES6');
console.log(livro.titulo); // Entendendo ES6

É importante tomar alguns cuidados:

Podemos também definir um objeto diretamente:

var livro = {
titulo: 'Anjos e Demônios'
}
console.log(livro.titulo); // Anjos e Demônios

Se atribuirmos o objeto a outra variável, qualquer alteração afetará ambas:
var outroLivro = livro;
livro.titulo = 'O Código da Vinci';
console.log(outroLivro.titulo); // O Código da Vinci
console.log(livro.titulo); // O Código da Vinci

DECLARAÇÃO DE PROPRIEDADES
Podemos omitir o nome da propriedade ao criar um objeto. Veja os exemplos:

Sem omissão:

var nome = 'Maria';
var sobrenome = 'Madalena';
var pessoa = {
nome: nome,
sobrenome: sobrenome
}

Com omissão:

const nome = 'Maria';
const sobrenome = 'Madalena';
const pessoa = { nome, sobrenome };

Esse princípio também se aplica à declaração de funções:

const nome = 'Maria';
const sobrenome = 'Madalena';
const seApresentar = function() {
console.log(Olá! Sou a ${this.nome} ${this.sobrenome});
}
const pessoa = { nome, sobrenome, seApresentar };
pessoa.seApresentar(); // Olá! Sou a Maria Madalena!

Ou da seguinte forma:

const nome = 'Maria';
const sobrenome = 'Madalena';
const pessoa = {
nome,
sobrenome,
seApresentar() {
console.log(Olá! Sou a ${this.nome} ${this.sobrenome});
}
};

OBJETOS LITERAIS X JSON
Os objetos literais são uma forma de estruturação de dados, enquanto o JSON (JavaScript Object Notation)
é um formato leve amplamente utilizado em aplicações web para troca de dados.