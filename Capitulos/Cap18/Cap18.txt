Anotações Capítulo 18 (obs: sem exemplo '.js', bem explicado aqui.)
Funções Geradoras
Funções geradoras são aquelas que podemos interromper e retomar sua execução várias vezes. Ou seja, podemos 
parar a execução e voltar de onde paramos.

Assim se dá uma função geradora:
function* percorrerLinha477() {
    console.log('Passei pela rua 1');
    yield 'Fim da linha';
}
O * indica que é uma função geradora e o yield sinaliza onde pode interromper para um retorno futuro. Ao 
chamarmos a função, ela retorna um objeto iterável que, ao chamarmos o método next(), percorre a função 
até o próximo yield.
const linha = percorrerLinha477(); // {}
linha.next(); // Passei pela rua 1

Com várias paradas:
function* percorrerLinha477() {
    console.log('Passei pela rua 1');
    yield 'Parada 1';
    console.log('Passei pela rua 2');
    yield 'Parada 2';
    console.log('Passei pela rua 3');
    yield 'Parada 3';
    console.log('Passei pela rua 4');
    yield 'Fim da linha';
}

const linha = percorrerLinha477();
let next = linha.next(); console.log(next);
next = linha.next(); console.log(next);
next = linha.next(); console.log(next);
next = linha.next(); console.log(next);
next = linha.next(); console.log(next);

Ao executar este código, temos:
"Passei pela rua 1
{ value: 'Parada 1', done: false }
Passei pela rua 2
{ value: 'Parada 2', done: false }
Passei pela rua 3
{ value: 'Parada 3', done: false }
Passei pela rua 4
{ value: 'Fim da linha', done: false }
{ value: undefined, done: true }"

Para evitar a repetição, podemos usar for...of:
const linha = percorrerLinha477();
for (let parada of linha) {
    console.log(parada);
}
A execução deste código gera o mesmo resultado:
"Passei pela rua 1
Parada 1
Passei pela rua 2
Parada 2
Passei pela rua 3
Parada 3
Passei pela rua 4
Fim da linha"

Podemos fazer assim também:
const timeDesenvolvimento = {
    quantidade: 3,
    senior: 'Luís',
    pleno: 'Márcia',
    junior: 'Christian',
    [Symbol.iterator]: function* () {
        yield this.senior;
        yield this.pleno;
        yield this.junior;
    }
}

const timeNegocios = {
    quantidade: 2,
    diretor: 'Marcelo',
    vice: 'Guilherme',
    [Symbol.iterator]: function* () {
        yield this.diretor;
        yield this.vice;
    }
}

const equipe = {
    timeDesenvolvimento,
    timeNegocios,
    [Symbol.iterator]: function* () {
        yield* timeDesenvolvimento;
        yield* timeNegocios;
    }
};
