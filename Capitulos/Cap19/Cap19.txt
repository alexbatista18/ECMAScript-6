Anotações Capítulo 19
Assíncronas com Promises
O problema conhecido como callback hell ocorre quando nosso código precisa solicitar um retorno de uma API, 
e a velocidade desse retorno varia conforme a conexão com a internet. Assim, não podemos iniciar o próximo 
código sem antes receber essa resposta. Isso resulta em uma lógica complexa, com uma cadeia de solicitações 
e tempos de resposta imprevisíveis.

Para lidar com esses problemas, existem as promises. Uma promise tem três estados:

Não resolvido: A operação está em andamento.
Resolvido: A operação foi concluída com sucesso (utilizamos o then para tratamento de sucesso).
Rejeitado: A operação foi concluída, mas ocorreu um erro (utilizamos o catch para tratamento de erro).
Exemplo:
let promise = new Promise((resolve, reject) => {
    let resultado = true;
    if (resultado) {
        resolve("Deu tudo certo!");
    } else {
        reject("Deu tudo errado!");
    }
});
Vale lembrar que, se lançarmos uma mensagem de erro usando throw new Error("erro!");, mesmo em uma condição 
then, o catch será ativado.
let promise = new Promise((resolve, reject) => {
    resolve('ok!');
});

promise
    .then((data) => {
        console.log(`Sucesso: ${data}`);
        throw new Error("erro!");
        return data;
    })
    .then((data) => console.log(`Sucesso: ${data}`))
    .catch((data) => console.log(`Falha: ${data}`));
Ao rodar este código, vemos que o segundo log de sucesso nunca é exibido:
Sucesso: ok!
Falha: Error: erro!
