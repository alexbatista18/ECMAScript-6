Anotações Capítulo 20 e 22.
Metaprogramação com Proxies
Proxies são objetos que representam outros objetos e, com eles, podemos alterar as propriedades desse dado 
objeto. Ao instanciar um objeto proxy, ele aceita dois parâmetros: o primeiro é o objeto alvo e o segundo 
é o handler. O handler é como o corpo do proxy, onde se encontra a lógica que definirá o seu comportamento.

Podemos passar essa lógica inteira como parâmetro:
const proxy = new Proxy(usuario, {
    get(alvo, propriedade) {
        console.log(`${propriedade} foi solicitada!`);
        return alvo[propriedade];
    }
});

Ou podemos dividir, criando a lógica dentro do const validador:
const validador = {
    set(alvo, propriedade, valor) {
        if (propriedade === 'idade') {
            if (!Number.isInteger(valor)) {
                throw new TypeError('A idade não é um número!');
            }
        }
        alvo[propriedade] = valor;
    }
};

E depois passar como parâmetro:
const usuario = new Proxy({}, validador);
usuario.idade = 10;
console.log(usuario.idade); // 10

Agora, vamos tentar valores que não sejam números e verificar se o código gera os erros:
const usuario = new Proxy({}, validador);
usuario.idade = 'dez'; // TypeError: A idade não é um número!
usuario.idade = {}; // TypeError: A idade não é um número!
usuario.idade = true; // TypeError: A idade não é um número!

Isso é muito interessante para impor erros na atribuição de valores a propriedades de objetos.

Capítulo 22: ECMAScript 2016 (ES7)
Adições:
O operador ** para exponenciação.
O método includes() para verificar se um array possui uma determinada variável.