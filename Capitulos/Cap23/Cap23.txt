Anotações Capítulo 23
Método Object.entries
O método Object.entries basicamente nos retorna um array com os pares de chave-valor das propriedades 
de um objeto. Exemplo:
const Pessoa = {
    nome: "Diogo",
    idade: 25
};
console.log(Object.entries(Pessoa));
// [ ['nome', 'Diogo'], ['idade', 25] ]

Podemos iterar com um laço for..of:
for (let [k, v] of Object.entries(Pessoa)) {
    console.log(`${k}: ${v}`);
}
// nome: Diogo
// idade: 25

Método Object.values
O método 'Object.values' retorna apenas os valores das propriedades do objeto:
console.log(Object.values(Pessoa)); 
// [ 'Diogo', 25 ]

'padStart' e 'padEnd'
Esses métodos servem para alinhar textos. padStart incrementa espaços no início das strings e padEnd no final. Exemplo:
const profissoes = [
    'desenvolvedor',
    'engenheiro',
    'jornalista',
    'arquiteto',
    'médico'
];

profissoes.forEach(profissao => {
    console.log(profissao.padStart(13, '-'));
});
/*
desenvolvedor
---engenheiro
---jornalista
----arquiteto
-------médico
*/

O primeiro parâmetro é o comprimento total da string desejada, e o segundo é o caractere a ser usado para preencher o espaço.
profissoes.forEach(profissao => {
    console.log(profissao.padEnd(13, '-'));
});
/*
desenvolvedor
engenheiro---
jornalista---
arquiteto----
médico-------
*/

Utilizando promises com async/await
Uma função async permite escrever código assíncrono de forma síncrona. Exemplo básico:
async function showGitHubUser(username) {
    const url = `https://api.github.com/users/${username}`;
    const response = await fetch(url);
    const user = await response.json();
    console.log(user);
}

Tratamento de erros com try...catch:
async function showGitHubUser(username) {
    const url = `https://api.github.com/users/${username}`;
    try {
        const response = await fetch(url);
        const user = await response.json();
        console.log(user);
    } catch (err) {
        console.log('Erro:', err);
    }
}
showGitHubUser('DiegoPinho');
Mais de uma promise:
async function showGitHubUserAndRepos(username) {
    const userPromise = fetch(`https://api.github.com/users/${username}`);
    const reposPromise = fetch(`https://api.github.com/users/${username}/repos`);
    
    const user = await userPromise;
    const repos = await reposPromise;
    
    const userData = await user.json();
    const reposData = await repos.json();
    
    console.log(userData.name);
    console.log(reposData.length);
}

Executando múltiplas promises simultaneamente com Promise.all:
async function showGitHubUserAndRepos(username) {
    const [userResponse, reposResponse] = await Promise.all([
        fetch(`https://api.github.com/users/${username}`),
        fetch(`https://api.github.com/users/${username}/repos`)
    ]);
    
    const user = await userResponse.json();
    const repos = await reposResponse.json();
    
    console.log(user.name);
    console.log(repos.length);
}


