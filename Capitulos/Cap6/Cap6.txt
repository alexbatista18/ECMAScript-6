Anotações Capítulo 6
Map

Nesta estrutura, qualquer valor pode ser usado como chave. Veja um exemplo definindo esses valores com o método set:

var map = new Map();
function funcao() {}
var objeto = {};
map.set("string", "sou uma string");
map.set(objeto, "sou um objeto");
map.set(funcao, "sou uma função");

Para recuperar os valores do mapa através das chaves, utilizamos o método get:

console.log(map.get("string")); // sou uma string
console.log(map.get(objeto)); // sou um objeto
console.log(map.get(funcao)); // sou uma função

Para saber quantos itens o mapa possui, podemos usar o método .size:

console.log(map.size); // 3

Para verificar se uma chave específica existe, usamos o método .has:

console.log(map.has("string")); // true
console.log(map.has("abc")); // false

Para remover um registro do mapa, utilizamos o método delete:

map.delete("string");
console.log(map.has("string")); // false

Para eliminar todos os registros, podemos usar o método clear:

map.clear();
console.log("tamanho: " + map.size); // tamanho: 0

Como vimos, o mapa é um objeto iterável, logo podemos usar iteradores nele. Quando usar Mapas ou Objetos? Se 
você precisa de algo dinâmico e as chaves não são apenas strings, use Map.

WeakMap

No caso do WeakMap, as chaves só podem ser objetos e são referências mantidas de forma fraca, ou seja, podem
ser coletadas pelo garbage collector quando não há mais referências a elas. Veja um exemplo de uma WeakMap
que armazena dois elementos HTML:

var weakMap = new WeakMap();
var elemento1 = window;
var elemento2 = document.querySelector('body');
weakMap.set(elemento1, 'sou o elemento1');
weakMap.set(elemento2, 'sou o elemento2');

console.log(weakMap.get(elemento1)); // sou o elemento1
console.log(weakMap.get(elemento2)); // sou o elemento2

Para WeakMap, temos apenas os métodos definidos: delete, has, get e set. O uso de WeakMap é raro, mas pode
ser útil para dados privados. Veja o exemplo a seguir:

Aqui não há segurança:

function Pessoa(nome) {
this._nome = nome;
}
Pessoa.prototype.getNome = function() {
return this._nome;
};

var roberto = new Pessoa('Roberto');
console.log(roberto.getNome()); // Roberto
console.log(roberto._nome); // Roberto

Agora, utilizando WeakMap para dados privados:

var Pessoa = (function() {
var dadosPrivados = new WeakMap();
function Pessoa(nome) {
dadosPrivados.set(this, { nome: nome });
}
Pessoa.prototype.getNome = function() {
return dadosPrivados.get(this).nome;
};
return Pessoa;
}());

var rafael = new Pessoa('Rafael');
console.log(rafael.getNome()); // Rafael
console.log(rafael.nome); // undefined